---
# https://docs.docker.com/install/linux/docker-ce/ubuntu/

- name: install pre-requisites
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

- name: add apt key
  apt_key:
    url: "{{ docker_gpgkey }}"
    state: present

- name: add apt repo
  apt_repository:
    repo: "{{ docker_repository }}"
    state: present
    update_cache: true

- name: config directory
  file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: 0755

- name: config file
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644

- name: install packages
  apt:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io

- name: docker server version
  shell: docker version --format '{{ "{{ .Server.Version }}" }}'
  become: yes
  register: docker_version
  changed_when: k8s_docker_version is not defined or k8s_docker_version != docker_version.stdout

- name: cache docker version
  set_fact:
    k8s_docker_version: "{{ docker_version.stdout }}"
    cacheable: true
  when: not docker_version.failed

# https://kubernetes.io/blog/2020/12/02/dockershim-faq/

- name: set dpkg_arch
  set_fact:
    dpkg_arch: amd64
    cacheable: yes
  when: ansible_architecture == "x86_64"

- name: set dpkg_arch
  set_fact:
    dpkg_arch: arm64
    cacheable: yes
  when: ansible_architecture == "aarch_64"

- name: check packages
  stat:
    path: "/var/cache/apt/archives/{{ cri_dockerd_deb }}"
  register: cache_cri_docker_deb

- name: download packages
  get_url:
    url: "{{ cri_dockerd_deb_url }}"
    dest: "/var/cache/apt/archives/{{ cri_dockerd_deb }}"
  when: not cache_cri_docker_deb.stat.exists

- name: install packages
  apt:
    deb: "/var/cache/apt/archives/{{ cri_dockerd_deb }}"
    state: present

# https://docs.docker.com/engine/install/linux-postinstall/

- name: add user to docker group
  user:
    name='{{ item }}'
    groups=docker
    append=yes
  with_items:
    "{{ ansible_user }}"
